#include "../GeneralClasses/IncludeFile.h"

int main (void){

    ofstream out_R;
    out_R.open("reflectance.txt");

    double r_metal;             // Metal refractive index (real part)
    double i_metal;             // Metal refractive index (imaginary part)
    double d_metal;             // Layer thickness value (nm)
    double n_prism; 		    // Prism refractive index
    double n_d;                 // Absorptance spectrums

	double wavelength;		    // Incident wavelength
    
    double theta_i = 0.1745;    // Start Incident Angle (in radians)
    
    int N = 3;                  // Set number of Layers

    double step_scale = 0.001;  // Set the interval step scale 

	int interface, choose;

    double real[N], *r;
    r = &real[0]; 

    double imag[N], *i;        
    i = &imag[0];

    double thickness[N], *d;        
    d = &thickness[0];

    Timer timer;

    cout <<
	"|----------------------------------------------------------------------------------------------|" << "\n"
	"|------------------------------------- Welcome to Sim-SPR -------------------------------------|" << "\n" 
	"| Sim-SPR is an open-source SPR simulator developed for the study of Surface Plasmon Resonance |" << "\n"
    "| of different materials using angular operation mode. In particular, Sim-SPR involved the     |" << "\n"
    "| numerical analysis of angular and spectral variation of reflectance calculated by using the  |" << "\n"
    "| characteristic transfer matrix method. Sim-SPR works for Kretschmann-Raether & Turbadar-Otto |" << "\n"
    "| configurations. The accuracy, efficiency and reliability of the Sim-SPR were validated by    |" << "\n"
    "| comparing results generated by using other simulation tools already consolidated in the lite-|" << "\n"
    "| rature and results of SPR experiments with standard samples.                                 |" << "\n"
	"|----------------------------------------------------------------------------------------------|" << "\n\n";

	cout << "# Choose the configuration and type the respective number:" << endl << endl;

    cout << "(1) Kretschmann-Raether" << endl;
    cout << "(2) Turbadar-Otto" << endl;
    
    cin >> choose;

    cout << endl;

    cout << "# Type the incident light wavelength (nm):" << endl;
    cin >> wavelength;

    cout << "# Type the prism refractive index:" << endl;
    cin >> n_prism;

    for (interface = 1; interface < N; interface++){

        cout << "Layer | Type the refractive index:" << endl;
        cout << interface << "\t" << "Real part" << "\t\t:";
        cin >> r_metal;
        
        cout << "Layer | Type the refractive index:" << endl;
        cout << interface << "\t" << "Imaginary part" << "\t\t:";
        cin >> i_metal;

        cout << "Layer | Type the layer thickness:" << endl;
        cout << interface << "\t" << "Layer thickness" << "\t\t:";
        cin >> d_metal;

        getchar();

        *(r+interface) = r_metal; 
        *(i+interface) = i_metal; 
        *(d+interface) = d_metal; 
    }

    // ***
    // Kretschmann-Raether configuration
    // ***

    if(choose == 1){
    // Start timer
    timer.start();
        while (theta_i <= 1.5707){                    
            out_R << (theta_i * (180/M_PI)) << "\t\t" << KSpr.Reflectance(wavelength, n_prism, real[1], theta_i, real[2], imag[2], thickness[1]) << endl;
            theta_i = theta_i + step_scale; 
        }
    // stop timer
    timer.stop();
    }

    // ***
    // Turbadar-Otto configuration
    // ***

    if(choose == 2){
    // Start timer
    timer.start();

        while (theta_i <= 1.5707){                    
            out_R << (theta_i * (180/M_PI)) << "\t\t" << OttoSpr.Reflectance(wavelength, n_prism, real[1], theta_i, real[2], imag[2], thickness[1]) << endl;
            theta_i = theta_i + step_scale; 
        }
    // stop timer
    timer.stop();
    }    

    out_R.close();
    
    return 0;
}